# Kubernetes Deployment Configuration for Web3 Services
# This file defines Kubernetes deployments for all Web3 components

apiVersion: v1
kind: Namespace
metadata:
  name: web3-system
  labels:
    name: web3-system
    component: web3-integration

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: web3-config
  namespace: web3-system
data:
  GCP_PROJECT: "${GCP_PROJECT_ID}"
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  WEB3_PROVIDER_URL: "http://web3-provider:8080"
  BIGQUERY_SERVICE_URL: "http://bigquery-service:8080"
  REDIS_URL: "redis://redis-service:6379"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: web3-secrets
  namespace: web3-system
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  api-key: "${BASE64_ENCODED_API_KEY}"
  db-password: "${BASE64_ENCODED_DB_PASSWORD}"
  service-account.json: "${BASE64_ENCODED_SERVICE_ACCOUNT}"

---
# Service Account for Web3 services
apiVersion: v1
kind: ServiceAccount
metadata:
  name: web3-service-account
  namespace: web3-system
  annotations:
    iam.gke.io/gcp-service-account: "${GCP_SERVICE_ACCOUNT_EMAIL}"

---
# Web3 Provider Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web3-provider
  namespace: web3-system
  labels:
    app: web3-provider
    component: web3-integration
    version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: web3-provider
  template:
    metadata:
      labels:
        app: web3-provider
        component: web3-integration
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: web3-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: web3-provider
        image: "${DOCKER_REGISTRY}/web3-provider:latest"
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        envFrom:
        - configMapRef:
            name: web3-config
        - secretRef:
            name: web3-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: cache-volume
        emptyDir: {}

---
# Web3 Provider Service
apiVersion: v1
kind: Service
metadata:
  name: web3-provider
  namespace: web3-system
  labels:
    app: web3-provider
    component: web3-integration
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: web3-provider

---
# BigQuery Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bigquery-service
  namespace: web3-system
  labels:
    app: bigquery-service
    component: web3-integration
    version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: bigquery-service
  template:
    metadata:
      labels:
        app: bigquery-service
        component: web3-integration
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: web3-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: bigquery-service
        image: "${DOCKER_REGISTRY}/bigquery-service:latest"
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        envFrom:
        - configMapRef:
            name: web3-config
        - secretRef:
            name: web3-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: tmp-volume
        emptyDir: {}

---
# BigQuery Service
apiVersion: v1
kind: Service
metadata:
  name: bigquery-service
  namespace: web3-system
  labels:
    app: bigquery-service
    component: web3-integration
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: bigquery-service

---
# Web3 Security Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web3-security
  namespace: web3-system
  labels:
    app: web3-security
    component: web3-integration
    version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: web3-security
  template:
    metadata:
      labels:
        app: web3-security
        component: web3-integration
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: web3-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: web3-security
        image: "${DOCKER_REGISTRY}/web3-security:latest"
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        envFrom:
        - configMapRef:
            name: web3-config
        - secretRef:
            name: web3-secrets
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: tmp-volume
        emptyDir: {}

---
# Web3 Security Service
apiVersion: v1
kind: Service
metadata:
  name: web3-security
  namespace: web3-system
  labels:
    app: web3-security
    component: web3-integration
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: web3-security

---
# Horizontal Pod Autoscaler for Web3 Provider
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: web3-provider-hpa
  namespace: web3-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: web3-provider
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

---
# Horizontal Pod Autoscaler for BigQuery Service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: bigquery-service-hpa
  namespace: web3-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: bigquery-service
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Horizontal Pod Autoscaler for Web3 Security
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: web3-security-hpa
  namespace: web3-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: web3-security
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Pod Disruption Budget for Web3 Provider
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: web3-provider-pdb
  namespace: web3-system
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: web3-provider

---
# Pod Disruption Budget for BigQuery Service
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: bigquery-service-pdb
  namespace: web3-system
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: bigquery-service

---
# Pod Disruption Budget for Web3 Security
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: web3-security-pdb
  namespace: web3-system
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: web3-security

---
# Network Policy for Web3 Services
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: web3-network-policy
  namespace: web3-system
spec:
  podSelector:
    matchLabels:
      component: web3-integration
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: web3-system
    - podSelector:
        matchLabels:
          component: web3-integration
    ports:
    - protocol: TCP
      port: 8080
  - from: []
    ports:
    - protocol: TCP
      port: 8080
    podSelector:
      matchLabels:
        app: web3-provider
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 53

---
# Service Monitor for Prometheus (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: web3-services-monitor
  namespace: web3-system
  labels:
    release: prometheus
spec:
  selector:
    matchLabels:
      component: web3-integration
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
  namespaceSelector:
    matchNames:
    - web3-system

---
# Resource Quotas for Namespace
apiVersion: v1
kind: ResourceQuota
metadata:
  name: web3-resource-quota
  namespace: web3-system
spec:
  hard:
    requests.cpu: "2"
    requests.memory: "4Gi"
    limits.cpu: "4"
    limits.memory: "8Gi"
    persistentvolumeclaims: "0"
    pods: "20"
    services: "10"
    secrets: "20"
    configmaps: "20"

---
# Limit Range for Containers
apiVersion: v1
kind: LimitRange
metadata:
  name: web3-limit-range
  namespace: web3-system
spec:
  limits:
  - default:
      memory: "512Mi"
      cpu: "250m"
    defaultRequest:
      memory: "128Mi"
      cpu: "50m"
    type: Container